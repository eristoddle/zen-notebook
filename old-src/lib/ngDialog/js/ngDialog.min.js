/*! ng-dialog - v0.3.11 (https://github.com/likeastore/ngDialog) */
!function (a, b) {
    "undefined" != typeof module && module.exports ? module.exports = b(require("angular")) : "function" == typeof define && define.amd ? define(["angular"], b) : b(a.angular)
}(this, function (a) {
    "use strict";
    var b, c = a.module("ngDialog", []), d = a.element, e = a.isDefined, f = (document.body || document.documentElement).style, g = e(f.animation) || e(f.WebkitAnimation) || e(f.MozAnimation) || e(f.MsAnimation) || e(f.OAnimation), h = "animationend webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend", i = !1;
    return c.provider("ngDialog", function () {
        var c = this.defaults = {
            className: "ngdialog-theme-default",
            plain: !1,
            showClose: !0,
            closeByDocument: !0,
            closeByEscape: !0,
            closeByNavigation: !1,
            appendTo: !1,
            preCloseCallback: !1,
            overlay: !0,
            cache: !0
        };
        this.setForceBodyReload = function (a) {
            i = a || !1
        }, this.setDefaults = function (b) {
            a.extend(c, b)
        };
        var e, f = 0, j = 0, k = {};
        this.$get = ["$document", "$templateCache", "$compile", "$q", "$http", "$rootScope", "$timeout", "$window", "$controller", function (l, m, n, o, p, q, r, s, t) {
            var u = l.find("body");
            i && q.$on("$locationChangeSuccess", function () {
                u = l.find("body")
            });
            var v = {
                onDocumentKeydown: function (a) {
                    27 === a.keyCode && w.close("$escape")
                }, setBodyPadding: function (a) {
                    var b = parseInt(u.css("padding-right") || 0, 10);
                    u.css("padding-right", b + a + "px"), u.data("ng-dialog-original-padding", b)
                }, resetBodyPadding: function () {
                    var a = u.data("ng-dialog-original-padding");
                    a ? u.css("padding-right", a + "px") : u.css("padding-right", "")
                }, performCloseDialog: function (a, c) {
                    var d = a.attr("id");
                    if ("undefined" != typeof s.Hammer) {
                        var f = b.hammerTime;
                        f.off("tap", e), f.destroy && f.destroy(), delete b.hammerTime
                    } else a.unbind("click");
                    1 === j && u.unbind("keydown"), a.hasClass("ngdialog-closing") || (j -= 1), q.$broadcast("ngDialog.closing", a), j = 0 > j ? 0 : j, g ? (b.$destroy(), a.unbind(h).bind(h, function () {
                        a.remove(), 0 === j && (u.removeClass("ngdialog-open"), v.resetBodyPadding()), q.$broadcast("ngDialog.closed", a)
                    }).addClass("ngdialog-closing")) : (b.$destroy(), a.remove(), 0 === j && (u.removeClass("ngdialog-open"), v.resetBodyPadding()), q.$broadcast("ngDialog.closed", a)), k[d] && (k[d].resolve({
                        id: d,
                        value: c,
                        $dialog: a,
                        remainingDialogs: j
                    }), delete k[d])
                }, closeDialog: function (b, c) {
                    var d = b.data("$ngDialogPreCloseCallback");
                    if (d && a.isFunction(d)) {
                        var e = d.call(b, c);
                        a.isObject(e) ? e.closePromise ? e.closePromise.then(function () {
                            v.performCloseDialog(b, c)
                        }) : e.then(function () {
                            v.performCloseDialog(b, c)
                        }, function () {
                        }) : e && v.performCloseDialog(b, c)
                    } else v.performCloseDialog(b, c)
                }
            }, w = {
                open: function (g) {
                    function h(a, b) {
                        return p.get(a, b || {}).then(function (a) {
                            return a.data || ""
                        })
                    }

                    function i(b) {
                        return b ? a.isString(b) && x.plain ? b : "boolean" != typeof x.cache || x.cache ? m.get(b) || h(b, {cache: !0}) : h(b, {cache: !1}) : "Empty template"
                    }

                    var l = this, x = a.copy(c);
                    g = g || {}, a.extend(x, g), f += 1, l.latestID = "ngdialog" + f;
                    var y;
                    k[l.latestID] = y = o.defer(), b = a.isObject(x.scope) ? x.scope.$new() : q.$new();
                    var z, A;
                    return o.when(i(x.template || x.templateUrl)).then(function (c) {
                        if (m.put(x.template || x.templateUrl, c), x.showClose && (c += '<div class="ngdialog-close"></div>'), l.$result = z = d('<div id="ngdialog' + f + '" class="ngdialog"></div>'), z.html(x.overlay ? '<div class="ngdialog-overlay"></div><div class="ngdialog-content">' + c + "</div>" : '<div class="ngdialog-content">' + c + "</div>"), x.data && a.isString(x.data)) {
                            var g = x.data.replace(/^\s*/, "")[0];
                            b.ngDialogData = "{" === g || "[" === g ? a.fromJson(x.data) : x.data
                        } else x.data && a.isObject(x.data) && (b.ngDialogData = x.data);
                        if (x.controller && (a.isString(x.controller) || a.isArray(x.controller) || a.isFunction(x.controller))) {
                            var h = t(x.controller, {$scope: b, $element: z});
                            z.data("$ngDialogControllerController", h)
                        }
                        if (x.className && z.addClass(x.className), A = x.appendTo && a.isString(x.appendTo) ? a.element(document.querySelector(x.appendTo)) : u, x.preCloseCallback) {
                            var i;
                            a.isFunction(x.preCloseCallback) ? i = x.preCloseCallback : a.isString(x.preCloseCallback) && b && (a.isFunction(b[x.preCloseCallback]) ? i = b[x.preCloseCallback] : b.$parent && a.isFunction(b.$parent[x.preCloseCallback]) ? i = b.$parent[x.preCloseCallback] : q && a.isFunction(q[x.preCloseCallback]) && (i = q[x.preCloseCallback])), i && z.data("$ngDialogPreCloseCallback", i)
                        }
                        if (b.closeThisDialog = function (a) {
                                v.closeDialog(z, a)
                            }, r(function () {
                                n(z)(b);
                                var a = s.innerWidth - u.prop("clientWidth");
                                u.addClass("ngdialog-open");
                                var c = a - (s.innerWidth - u.prop("clientWidth"));
                                c > 0 && v.setBodyPadding(c), A.append(z), x.name ? q.$broadcast("ngDialog.opened", {
                                    dialog: z,
                                    name: x.name
                                }) : q.$broadcast("ngDialog.opened", z)
                            }), x.closeByEscape && u.bind("keydown", v.onDocumentKeydown), x.closeByNavigation && q.$on("$locationChangeSuccess", function () {
                                v.closeDialog(z)
                            }), e = function (a) {
                                var b = x.closeByDocument ? d(a.target).hasClass("ngdialog-overlay") : !1, c = d(a.target).hasClass("ngdialog-close");
                                (b || c) && w.close(z.attr("id"), c ? "$closeButton" : "$document")
                            }, "undefined" != typeof s.Hammer) {
                            var k = b.hammerTime = s.Hammer(z[0]);
                            k.on("tap", e)
                        } else z.bind("click", e);
                        return j += 1, w
                    }), {
                        id: "ngdialog" + f, closePromise: y.promise, close: function (a) {
                            v.closeDialog(z, a)
                        }
                    }
                }, openConfirm: function (b) {
                    var c = o.defer(), e = {closeByEscape: !1, closeByDocument: !1};
                    a.extend(e, b), e.scope = a.isObject(e.scope) ? e.scope.$new() : q.$new(), e.scope.confirm = function (a) {
                        c.resolve(a);
                        var b = d(document.getElementById(f.id));
                        v.performCloseDialog(b, a)
                    };
                    var f = w.open(e);
                    return f.closePromise.then(function (a) {
                        return a ? c.reject(a.value) : c.reject()
                    }), c.promise
                }, close: function (a, b) {
                    var c = d(document.getElementById(a));
                    return c.length ? v.closeDialog(c, b) : w.closeAll(b), w
                }, closeAll: function (b) {
                    var c = document.querySelectorAll(".ngdialog");
                    a.forEach(c, function (a) {
                        v.closeDialog(d(a), b)
                    })
                }, getDefaults: function () {
                    return c
                }
            };
            return w
        }]
    }), c.directive("ngDialog", ["ngDialog", function (b) {
        return {
            restrict: "A", scope: {ngDialogScope: "="}, link: function (c, d, e) {
                d.on("click", function (d) {
                    d.preventDefault();
                    var f = a.isDefined(c.ngDialogScope) ? c.ngDialogScope : "noScope";
                    a.isDefined(e.ngDialogClosePrevious) && b.close(e.ngDialogClosePrevious);
                    var g = b.getDefaults();
                    b.open({
                        template: e.ngDialog,
                        className: e.ngDialogClass || g.className,
                        controller: e.ngDialogController,
                        scope: f,
                        data: e.ngDialogData,
                        showClose: "false" === e.ngDialogShowClose ? !1 : "true" === e.ngDialogShowClose ? !0 : g.showClose,
                        closeByDocument: "false" === e.ngDialogCloseByDocument ? !1 : "true" === e.ngDialogCloseByDocument ? !0 : g.closeByDocument,
                        closeByEscape: "false" === e.ngDialogCloseByEscape ? !1 : "true" === e.ngDialogCloseByEscape ? !0 : g.closeByEscape,
                        preCloseCallback: e.ngDialogPreCloseCallback || g.preCloseCallback
                    })
                })
            }
        }
    }]), c
});